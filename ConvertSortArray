//108. Convert Sorted Array to Binary Search Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(const vector<int> &nums, int start, int last) {
        if(start > last) return nullptr;
        int mid = start + (last - start) / 2;
        TreeNode* root = new TreeNode(nums[mid]);
        if(start == last) return root;
        root->left = buildTree(nums,start,mid-1);
        root->right = buildTree(nums,mid+1,last);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return buildTree(nums,0,nums.size() - 1);
    }
};
/*
Runtime: 12 ms, faster than 97.31% of C++ online submissions for Convert Sorted Array to Binary Search Tree.
Memory Usage: 20.6 MB, less than 75.61% of C++ online submissions for Convert Sorted Array to Binary Search Tree.
*/
