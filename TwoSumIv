//653. Two Sum IV - Input is a BST
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //question: Is the value of each node in BST unique?
    bool pairTarget(TreeNode* root, TreeNode* current_node, const int &k){
        if (root == nullptr) return false;
        if (root->val == k && root != current_node) return true;
        if (k > root->val) return pairTarget(root->right, current_node,k);
        if (k < root->val) return pairTarget(root->left, current_node,k);
        return false;
    }
    bool findTarget(TreeNode* root, int k) {
        int temp; //record the value of the pair
        TreeNode* current_node;
        queue<TreeNode*> q; //run through all component of the tree
        q.emplace(root);
        while (!q.empty()){
            current_node = q.front();
            temp = k - current_node->val;
            if (temp > root->val){
                if (pairTarget(root->right, current_node, temp)) return true;
            }
            if (temp < root->val){
                if (pairTarget(root->left, current_node, temp)) return true;
            }            
            if (current_node->left) q.emplace(current_node->left);
            if (current_node->right) q.emplace(current_node->right);
            q.pop();
        }        
        return false;    
    }
};
/*
Runtime: 48 ms, faster than 93.25% of C++ online submissions for Two Sum IV - Input is a BST.
Memory Usage: 35.2 MB, less than 92.18% of C++ online submissions for Two Sum IV - Input is a BST.
*/
